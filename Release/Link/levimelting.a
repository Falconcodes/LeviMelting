;/*
; * levimelting.c
; *
; * Created: 09.02.2016 23:31:09
; * Author: Falcon
; */
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#asm
;PCODE: $0000000D VOL: 0
        .equ __w1_port=0xB
;PCODE: $0000000E VOL: 0
        .equ __w1_bit=6
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 000D #endasm
;
;#include <ds18b20.h>
;#include <delay.h>
;#include <stdio.h>
;#include <stdint.h>
;#include <stdbool.h>
;
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR)) //настройка референса для АЦП
;#define TOK_KOEF 5
;#define LED PORTB.5
;#define RELAY_CAP_ON  PORTD.5=0
;#define RELAY_CAP_OFF PORTD.5=1
;#define RELAY_PWR_ON  PORTD.4=0
;#define RELAY_PWR_OFF PORTD.4=1
;#define MAX_ERRORS 5 //число ошибок при автопрогреве, после которого уходит в защиту
;#define WARM_TIME 30 //секунд на прогрев
;#define MELT_TIME 90 //секунд на плавку
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input){
; 0000 0021 unsigned int read_adc(unsigned char adc_input){

	.CSEG
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0022   int i;
; 0000 0023   unsigned long adc_summ=0;
; 0000 0024   ADMUX=adc_input | (0<<REFS1) | (1<<REFS0) | (0<<ADLAR);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;	adc_input -> Y+6
;	i -> R16,R17
;	adc_summ -> Y+2
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0025   // Delay needed for the stabilization of the ADC input voltage
; 0000 0026   delay_us(10);
;PCODE: $00000024 VOL: 0
; 0000 0027 
; 0000 0028    for (i=1; i<100; i++){
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0029     // Start the AD conversion
; 0000 002A     ADCSRA|=(1<<ADSC);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 002B     // Wait for the AD conversion to complete
; 0000 002C     while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 002D     ADCSRA|=(1<<ADIF);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 002E     adc_summ+=ADCW;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 002F    }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0030   return adc_summ/100;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0031 }
;PCODE: $0000004D VOL: 0
;
;unsigned int tok, tok_old;
;unsigned char errors;
;
;/* maximum number of DS18B20 connected to the 1 Wire bus */
;#define MAX_DEVICES 2
;
;/* DS18B20 devices ROM code storage area */
;unsigned char rom_code[MAX_DEVICES][9];
;
;void main(void){
; 0000 003C void main(void){
;PCODE: $0000004E VOL: 0
; 0000 003D   unsigned int i=0, fet_temp, water_temp;
; 0000 003E   unsigned char j,devices;
; 0000 003F 
; 0000 0040   RELAY_CAP_OFF;
;PCODE: $0000004F VOL: 0
;	i -> R16,R17
;	fet_temp -> R18,R19
;	water_temp -> R20,R21
;	j -> Y+1
;	devices -> Y+0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0041   RELAY_PWR_OFF;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0042 
; 0000 0043   DDRB.0=DDRB.3=DDRB.5=DDRD.2=DDRD.3=DDRD.4=DDRD.5=1;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0044   PORTB.0=0;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0045 
; 0000 0046   //таймер, управляющий ШИМ для водяного насоса и для подстройки частоты
; 0000 0047   TCCR2A=(1<<COM2A1) | (0<<COM2A0) | (1<<COM2B1) | (0<<COM2B0) | (1<<WGM21) | (1<<WGM20);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0048   TCCR2B=(0<<WGM22) | (1<<CS22) | (1<<CS21) | (0<<CS20);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0049   TCNT2=0;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 004A   OCR2B=0;    //период для частоты (больше = частота ниже)
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 004B   OCR2A=50;   //период для насоса (больше = больше напор и громче работает)
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 004C 
; 0000 004D   // ADC initialization 125,000 kHz  AVCC pin ADC Stopped
; 0000 004E   DIDR0=(1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D) | (1<<ADC2D) | (1<<ADC1D) | (0<<ADC0D);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 004F   ADCSRA=(1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0050 
; 0000 0051   // USART initialization 8 Data, 1 Stop, No Parity Asynchronous Baud Rate: 9600
; 0000 0052   UCSR0B=(1<<TXEN0);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0053   UCSR0C=((1<<UCSZ01) | (1<<UCSZ00));
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0054   UBRR0L=0x67;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0055 
; 0000 0056   OCR2B=0;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0057 
; 0000 0058   printf("LOADING...");
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0059 
; 0000 005A   /*searching for ds18b20 sensors*/
; 0000 005B   devices=w1_search(0xf0,rom_code);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 005C   if (devices == 2) printf("Temp. control ready",devices);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 005D   else printf("Error: %u temp.sensor(s) not found",devices, (2-devices));
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 005E   /* configure each DS18B20 device */
; 0000 005F   for (i=0;i<devices;)
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0060     if (!ds18b20_init(&rom_code[i++][0],20,30,DS18B20_9BIT_RES))
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0061        {
; 0000 0062        printf("Init error for device #%u",i);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0063        while (1); /* stop here if init error */
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0064        };
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0065 
; 0000 0066 //  while (1)
; 0000 0067 //      {
; 0000 0068 //          printf(" t(FETs)=%i C",(int)ds18b20_temperature(&rom_code[1][0]));
; 0000 0069 //          printf("t(Water)=%i C",(int)ds18b20_temperature(&rom_code[0][0]));
; 0000 006A //          delay_ms(1000);
; 0000 006B //      };
; 0000 006C 
; 0000 006D   for(i=0;i<3;i++){
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 006E   delay_ms(500);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 006F   LED=1;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0070   delay_ms(500);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0071   LED=0;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0072   }
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0073 
; 0000 0074   RELAY_CAP_ON;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0075 
; 0000 0076   printf("t(FETs)=  %i C",(int)ds18b20_temperature(&rom_code[0][0]));
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0077   printf("t(Water)= %i C",(int)ds18b20_temperature(&rom_code[1][0]));
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0078 
; 0000 0079   delay_ms(500);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 007A 
; 0000 007B   RELAY_PWR_ON;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 007C 
; 0000 007D   printf("WARM-UP IN PROGRESS...");
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 007E 
; 0000 007F  //===ЭТАП ПЕРВЫЙ. Прогрев пустого контура большим током
; 0000 0080   #asm("sei")
;PCODE: $00000110 VOL: 0
	sei
;PCODE: $00000111 VOL: 0
; 0000 0081   while (i < (WARM_TIME*3)) { //ждем WARM_TIME секунд, пока прогреется
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0082   i++;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0083   tok=read_adc(0);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0084 
; 0000 0085   //цикл, повышающий ток и понижающий частоту ближе к резонансу
; 0000 0086   while (tok>30 && tok<315 && OCR2B<110){  //ток больше минимального, т.е. питание силовой подано, и меньше требуемого
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0087    OCR2B++;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0088    tok_old=tok;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0089    tok=read_adc(0);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 008A    if (tok_old > tok)errors++; //считаем количество ошибок, когда изменение частоты приводит к изменению тока не в ту ст ...
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 008B    if (errors > MAX_ERRORS){   //и если ошибок слишком много - уходим в защиту
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 008C     OCR2B=0;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 008D     printf("Error: Auto-Ajust Failed");
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 008E     delay_ms(500);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 008F     RELAY_PWR_OFF;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0090     while(1);
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0091    }
; 0000 0092   }
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0093   errors=0;
;PCODE: $0000014D VOL: 0
; 0000 0094 
; 0000 0095   //если ток превышает, повышаем частоту дальше от резонанса
; 0000 0096    while (tok>325 && OCR2B>=0) {
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0097    OCR2B--;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0098    tok_old=tok;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0099    tok=read_adc(0);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 009A    if (tok_old < tok) errors++; //считаем количество ошибок
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 009B    if (errors > MAX_ERRORS){    //и если слишком много - уходим в защиту
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 009C    OCR2B=0;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 009D    printf("Error: Auto-Ajust Failed");
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 009E    delay_ms(500);
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 009F    RELAY_PWR_OFF;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00A0    while(1);
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00A1    }
; 0000 00A2   }
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 00A3   errors=0;
;PCODE: $0000017D VOL: 0
; 0000 00A4 
; 0000 00A5   if (tok<30){
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00A6   OCR2B=0; //если пропало силовое питание - выводим частоту на начальный уровень (максимум)
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00A7   printf("Error: Supply Under-Voltage");
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00A8   delay_ms(500);
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00A9   RELAY_PWR_OFF;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 00AA   while(1);
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 00AB   }
; 0000 00AC 
; 0000 00AD   //температурный контроль
; 0000 00AE   fet_temp =   (int)ds18b20_temperature(&rom_code[0][0]);
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00AF   water_temp = (int)ds18b20_temperature(&rom_code[1][0]);
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 00B0 
; 0000 00B1   if (fet_temp > 60)
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00B2   {
; 0000 00B3     OCR2B=0; //завышаем частоту = занижаем ток
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 00B4     delay_ms(500); //ждем реакции
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 00B5     RELAY_PWR_OFF; //отрубаем питание силовой
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00B6     printf("Error: FETs over-heat");
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 00B7   }
; 0000 00B8   if (water_temp > 70)
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 00B9   {
; 0000 00BA     OCR2B=0; //завышаем частоту = занижаем ток
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 00BB     delay_ms(500); //ждем реакции
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 00BC     RELAY_PWR_OFF; //отрубаем питание силовой
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 00BD     printf("Error: Cooling Water over-heat");
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 00BE   }
; 0000 00BF   printf("temp: %iC(FETs), %iC(Water)", fet_temp, water_temp);
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 00C0  }
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 00C1 
; 0000 00C2  if ((OCR2B < 30) || (OCR2B > 200)){    //если прогрев прошел, но устойчивый OCR2B не попадает в диапазон, тоже отключае ...
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 00C3    OCR2B=0;
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 00C4    printf("Error: Need to manual ajustment");
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 00C5    delay_ms(500);
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 00C6    RELAY_PWR_OFF;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 00C7    while(1);
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 00C8    }
; 0000 00C9 
; 0000 00CA  //---КОНЕЦ ПЕРВОГО ЭТАПА
; 0000 00CB 
; 0000 00CC  printf("tok: %u, OCR2B: %u", tok, OCR2B);
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 00CD 
; 0000 00CE  delay_ms(50);
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 00CF  printf("WARM-UP SUCCESS");
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 00D0 
; 0000 00D1  //===ЭТАП ВТОРОЙ. Перестройка частоты под образец
; 0000 00D2  //повышаем частоту (понижаем ток) с запасом, перед внесением образца
; 0000 00D3    while (tok>240 && OCR2B>=0) {
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 00D4    OCR2B--;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 00D5    tok=read_adc(0);
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 00D6    }
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 00D7 
; 0000 00D8   printf("Place sample into inductor in 10 seconds");
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 00D9 
; 0000 00DA   i=0;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 00DB   while(i < MELT_TIME)
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 00DC   {
; 0000 00DD     i++;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 00DE 
; 0000 00DF     //температурный контроль
; 0000 00E0     fet_temp =   (int)ds18b20_temperature(&rom_code[0][0]);
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 00E1     water_temp = (int)ds18b20_temperature(&rom_code[1][0]);
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 00E2 
; 0000 00E3     if (fet_temp > 60)
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 00E4     {
; 0000 00E5       OCR2B=0; //завышаем частоту = занижаем ток
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 00E6       delay_ms(500); //ждем реакции
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 00E7       RELAY_PWR_OFF; //отрубаем питание силовой
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 00E8       printf("Error: FETs over-heat");
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 00E9     }
; 0000 00EA     if (water_temp > 70)
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 00EB     {
; 0000 00EC       OCR2B=0; //завышаем частоту = занижаем ток
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 00ED       delay_ms(500); //ждем реакции
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 00EE       RELAY_PWR_OFF; //отрубаем питание силовой
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 00EF       printf("Error: Cooling Water over-heat");
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 00F0     }
; 0000 00F1     printf("temp: %iC(FETs), %iC(Water)", fet_temp, water_temp);
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 00F2     delay_ms(700); //подбор этой паузы, чтобы MELT_TIME в условии цикла соответствовало секундам (чтобы весь цикл выполн ...
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 00F3   }
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 00F4 
; 0000 00F5   //---КОНЕЦ ВТОРОГО ЭТАПА
; 0000 00F6 
; 0000 00F7   OCR2B=0;
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 00F8   printf("Melting overtime. Turn-Off.");
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 00F9   delay_ms(500);
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 00FA   RELAY_PWR_OFF;
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 00FB }
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
